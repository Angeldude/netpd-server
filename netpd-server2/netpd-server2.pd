#N canvas 809 9 322 606 10;
#X declare -stdpath extra/mrpeach;
#N canvas 0 0 555 789 forward_to_socket 0;
#X obj 15 119 route 47;
#N canvas 805 209 205 169 serialize 0;
#X obj 17 111 list split 1;
#X obj 17 65 until;
#X obj 17 88 list append;
#X obj 142 102 b;
#X obj 17 40 t b a;
#X obj 17 13 inlet;
#X obj 94 14 inlet;
#X obj 94 36 b;
#X obj 17 133 outlet;
#X connect 0 0 8 0;
#X connect 0 1 2 1;
#X connect 0 2 3 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 1 1;
#X connect 4 0 1 0;
#X connect 4 1 2 1;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 7 0 1 1;
#X restore 15 178 pd serialize;
#X obj 15 299 moses 48;
#X obj 68 355 moses 58;
#X obj 15 453 f;
#X obj 15 327 sel 47;
#X obj 15 224 t a b;
#X obj 47 247 f;
#X obj 47 267 + 1;
#X msg 65 225 0;
#X obj 15 480 pack f f;
#X obj 15 519 t a b a;
#X obj 38 587 list split;
#X msg 105 565 \$2;
#X obj 38 544 list append;
#X text 147 247 count number of digits;
#X text 174 385 stop \, if a non-digit byte is detected;
#N canvas 0 0 534 242 digits_to_float 0;
#X obj 28 133 f;
#X obj 98 111 * 10;
#X obj 60 112 +;
#X obj 28 76 t b a;
#X obj 28 155 t a a;
#X obj 28 53 - 48;
#X msg 78 89 0;
#X obj 28 30 inlet;
#X obj 28 183 outlet;
#X text 150 111 convert incoming digit-byte stream to a float;
#X obj 78 46 inlet;
#X text 137 45 reset;
#X connect 0 0 4 0;
#X connect 1 0 2 1;
#X connect 2 0 0 1;
#X connect 3 0 0 0;
#X connect 3 1 2 0;
#X connect 4 0 8 0;
#X connect 4 1 1 0;
#X connect 5 0 3 0;
#X connect 6 0 2 1;
#X connect 7 0 5 0;
#X connect 10 0 6 0;
#X restore 68 420 pd digits_to_float;
#X obj 137 388 t b;
#X obj 137 158 t b;
#X text 106 329 <- output result on next '/' (= 47);
#X text 154 120 first byte must be a '/' (= 47);
#X obj 15 58 t a a a a a a a b;
#X text 93 480 <socket> <number_of_digits>;
#X text 179 620 realign OSC address to a multiple of 4 bytes;
#X text 130 588 get rid of the first OSC address field (= [routeOSC
*]);
#X obj 15 695 list append;
#X obj 15 720 list trim;
#X obj 15 85 list split 8;
#X text 155 81 socket number cannot exceed 6 digits \, so we only need
to check the first seven bytes (2x'/' + 6);
#X obj 15 13 r SERVER;
#X obj 15 35 route from;
#X msg 15 673 to send \$1;
#X obj 15 744 s SERVER;
#N canvas 318 209 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 71 644 pd tcp.prepare;
#N canvas 92 64 196 159 realign 0;
#X obj 18 38 t b a;
#X obj 50 60 s to.realign;
#X obj 50 79 r from.realign;
#X obj 18 103 list append;
#X obj 18 17 inlet;
#X obj 18 124 outlet;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 2 0 3 1;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X restore 71 618 pd realign;
#X connect 0 0 1 0;
#X connect 1 0 6 0;
#X connect 2 0 5 0;
#X connect 2 1 3 0;
#X connect 3 0 17 0;
#X connect 3 1 18 0;
#X connect 4 0 10 0;
#X connect 5 0 4 0;
#X connect 5 1 18 0;
#X connect 6 0 2 0;
#X connect 6 1 7 0;
#X connect 7 0 8 0;
#X connect 8 0 7 1;
#X connect 8 0 10 1;
#X connect 9 0 7 1;
#X connect 10 0 11 0;
#X connect 11 0 32 0;
#X connect 11 1 14 0;
#X connect 11 2 13 0;
#X connect 12 1 35 0;
#X connect 13 0 12 1;
#X connect 14 0 12 0;
#X connect 17 0 4 1;
#X connect 18 0 19 0;
#X connect 19 0 1 1;
#X connect 22 0 28 0;
#X connect 22 6 14 1;
#X connect 22 7 9 0;
#X connect 22 7 17 1;
#X connect 26 0 27 0;
#X connect 27 0 33 0;
#X connect 28 0 0 0;
#X connect 30 0 31 0;
#X connect 31 0 22 0;
#X connect 32 0 26 0;
#X connect 34 0 26 1;
#X connect 35 0 34 0;
#X restore 12 255 pd forward_to_socket;
#N canvas 393 132 493 501 realign 0;
#N canvas 1048 333 213 342 find 0;
#X obj 15 124 list split 1;
#X obj 15 77 until;
#X obj 15 99 list append;
#X obj 122 118 bang;
#X obj 15 14 inlet;
#X obj 15 43 t b a b;
#X obj 15 152 t a b;
#X obj 47 176 f;
#X obj 47 200 + 1;
#X msg 65 152 0;
#X obj 15 228 sel 44;
#X obj 15 252 f;
#X obj 15 306 outlet;
#X obj 15 275 - 1;
#X connect 0 0 6 0;
#X connect 0 1 2 1;
#X connect 0 2 3 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 1 1;
#X connect 4 0 5 0;
#X connect 5 0 1 0;
#X connect 5 1 2 1;
#X connect 5 2 9 0;
#X connect 6 0 10 0;
#X connect 6 1 7 0;
#X connect 7 0 8 0;
#X connect 8 0 7 1;
#X connect 8 0 11 1;
#X connect 9 0 7 1;
#X connect 10 0 11 0;
#X connect 10 0 3 0;
#X connect 11 0 13 0;
#X connect 13 0 12 0;
#X restore 82 67 pd find 44;
#X obj 15 34 t a a;
#X obj 15 96 list split;
#N canvas 46 270 341 337 strip 0;
#X obj 35 128 list split 1;
#X obj 35 81 until;
#X obj 35 103 list append;
#X obj 142 122 bang;
#X obj 15 14 inlet;
#X obj 160 175 t a;
#X obj 67 175 list prepend;
#X obj 15 45 t b b a b;
#X obj 15 210 list append;
#X obj 35 151 sel 0;
#X obj 195 122 b;
#X obj 15 233 outlet;
#X connect 0 0 9 0;
#X connect 0 1 2 1;
#X connect 0 2 3 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 1 1;
#X connect 4 0 7 0;
#X connect 5 0 6 1;
#X connect 6 0 5 0;
#X connect 6 0 8 1;
#X connect 7 0 8 0;
#X connect 7 1 1 0;
#X connect 7 2 2 1;
#X connect 7 3 10 0;
#X connect 8 0 11 0;
#X connect 9 1 6 0;
#X connect 10 0 6 1;
#X connect 10 0 8 1;
#X restore 15 135 pd strip 0;
#X obj 47 230 mod 4;
#X obj 47 251 sel 0 1 2 3;
#X msg 47 331 0 0 0 0;
#X msg 65 311 0 0 0;
#X msg 84 292 0 0;
#X msg 102 272 0;
#X obj 15 378 list append;
#X obj 15 428 list append;
#X obj 15 180 t a a;
#X obj 47 208 list length;
#X obj 15 9 inlet;
#X text 168 67 find start of type tag: 44 = \,;
#X text 101 135 strip any trailing zeros from OSC adress pattern;
#X text 135 307 align OSC address to a multiple of 4 bytes;
#X text 113 430 join OSC address and rest of OSC packet;
#X obj 15 452 outlet;
#X text 113 96 split OSC address pattern from rest of OSC packet;
#X connect 0 0 2 1;
#X connect 1 0 2 0;
#X connect 1 1 0 0;
#X connect 2 0 3 0;
#X connect 2 1 11 1;
#X connect 3 0 12 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 1 7 0;
#X connect 5 2 8 0;
#X connect 5 3 9 0;
#X connect 6 0 10 1;
#X connect 7 0 10 1;
#X connect 8 0 10 1;
#X connect 9 0 10 1;
#X connect 10 0 11 0;
#X connect 11 0 19 0;
#X connect 12 0 10 0;
#X connect 12 1 13 0;
#X connect 13 0 4 0;
#X connect 14 0 1 0;
#X restore 12 437 pd realign;
#X obj 12 415 r to.realign;
#X obj 12 458 s from.realign;
#N canvas 0 0 559 497 forward_to_broadcast 0;
#X obj 15 156 route 47;
#X text 190 331 realign OSC address to a multiple of 4 bytes;
#X obj 15 414 list append;
#X obj 15 439 list trim;
#X obj 15 96 list split 3;
#X text 156 102 first field of OSC address mustn't exceed 1 byte (+
'/');
#X text 168 152 we only need to check for this sequence: 47 98 47;
#X text 166 174 98 = 'b';
#X obj 15 181 route 98;
#X obj 15 204 route 47;
#X obj 15 235 list append;
#X obj 15 264 t b a;
#X obj 47 288 list split 2;
#X text 171 287 skip first field of OSC adress;
#X obj 15 69 t a a a a a a a;
#X obj 15 15 r SERVER;
#X obj 15 36 route from;
#X msg 15 392 to broadcast;
#X obj 15 463 s SERVER;
#N canvas 318 209 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 87 359 pd tcp.prepare;
#N canvas 92 64 196 159 realign 0;
#X obj 18 38 t b a;
#X obj 50 60 s to.realign;
#X obj 50 79 r from.realign;
#X obj 18 103 list append;
#X obj 18 17 inlet;
#X obj 18 124 outlet;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 2 0 3 1;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X restore 87 333 pd realign;
#X connect 0 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 18 0;
#X connect 4 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 17 0;
#X connect 11 1 12 0;
#X connect 12 1 20 0;
#X connect 14 0 4 0;
#X connect 14 6 10 1;
#X connect 15 0 16 0;
#X connect 16 0 14 0;
#X connect 17 0 2 0;
#X connect 19 0 2 1;
#X connect 20 0 19 0;
#X restore 12 233 pd forward_to_broadcast;
#N canvas 151 89 597 554 forward_to_server 0;
#X obj 15 173 route 47;
#X text 240 372 realign OSC address to a multiple of 4 bytes;
#X obj 15 440 list append;
#X obj 15 463 list trim;
#X obj 15 113 list split 3;
#X text 156 119 first field of OSC address mustn't exceed 1 byte (+
'/');
#X text 168 169 we only need to check for this sequence: 47 98 47;
#X text 166 191 98 = 'b';
#X obj 15 221 route 47;
#X obj 15 252 list append;
#X obj 15 281 t b a;
#X obj 47 305 list split 2;
#X text 171 304 skip first field of OSC adress;
#X obj 15 198 route 115;
#X msg 15 418 server;
#X obj 15 29 r SERVER;
#X obj 15 50 route from;
#X obj 15 86 t a a a a a a a;
#X obj 15 489 s SERVER;
#X obj 89 394 unpackOSC;
#N canvas 92 64 196 159 realign 0;
#X obj 18 38 t b a;
#X obj 50 60 s to.realign;
#X obj 50 79 r from.realign;
#X obj 18 103 list append;
#X obj 18 17 inlet;
#X obj 18 124 outlet;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 2 0 3 1;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X restore 89 367 pd realign;
#X connect 0 0 13 0;
#X connect 2 0 3 0;
#X connect 3 0 18 0;
#X connect 4 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 14 0;
#X connect 10 1 11 0;
#X connect 11 1 20 0;
#X connect 13 0 8 0;
#X connect 14 0 2 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 17 0 4 0;
#X connect 17 6 9 1;
#X connect 19 0 2 1;
#X connect 20 0 19 0;
#X restore 12 277 pd forward_to_server;
#N canvas 791 42 365 437 SERVER 0;
#X obj 8 22 r SERVER;
#X obj 8 60 route to;
#X obj 8 401 s SERVER;
#X obj 8 364 list trim;
#X obj 8 343 list prepend from;
#X obj 39 241 list trim;
#X obj 71 195 list trim;
#X obj 71 174 list prepend socket;
#X obj 39 220 list prepend num_of_clients;
#X obj 103 154 list trim;
#X obj 103 133 list prepend ip;
#X text 253 137 ip;
#X text 253 175 socket;
#X text 246 219 num_of_clients;
#X obj 8 113 tcpserver 8003;
#X text 244 64 to clients;
#X text 250 289 from clients;
#N canvas 364 260 225 246 repack_OSC 0;
#N canvas 628 406 424 313 drip 0;
#X obj 12 15 inlet;
#X obj 12 226 outlet;
#X obj 107 16 table \$0.buffer 65536;
#X obj 76 82 s \$0.buffer;
#X obj 76 61 list prepend 0;
#X obj 12 37 t a a;
#X text 9 265 this 'drip' approach might use more memory \, but hopefully
less cpu cycles.;
#X obj 12 102 list length;
#X obj 12 150 until;
#X obj 12 126 t a b;
#X obj 12 173 f;
#X obj 60 176 + 1;
#X msg 61 150 0;
#X obj 12 202 tabread \$0.buffer;
#X connect 0 0 5 0;
#X connect 4 0 3 0;
#X connect 5 0 7 0;
#X connect 5 1 4 0;
#X connect 7 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 8 0;
#X connect 9 1 12 0;
#X connect 10 0 11 0;
#X connect 10 0 13 0;
#X connect 11 0 10 1;
#X connect 12 0 10 1;
#X connect 13 0 1 0;
#X restore 9 63 pd drip;
#N canvas 820 354 408 355 parse_frameheader 0;
#X obj 14 10 inlet;
#X obj 14 304 outlet;
#X obj 322 178 outlet;
#X obj 134 228 list prepend;
#X obj 230 228 t a;
#X obj 14 43 list prepend 0;
#X obj 14 123 f;
#X obj 14 144 + 1;
#X obj 14 166 sel 4;
#X obj 14 99 t b a;
#X obj 14 69 route 0 1;
#X text 97 64 0 = frame header;
#X text 97 80 1 = frame content;
#X obj 14 187 t b b;
#X obj 109 22 r \$0.route;
#X obj 46 230 s \$0.route;
#X msg 46 208 1;
#X obj 14 261 list append;
#X obj 243 18 inlet;
#X obj 243 44 b;
#X msg 272 45 0;
#X obj 272 65 s \$0.route;
#N canvas 504 266 169 262 MSB_2SB_3SB_LSB->float 0;
#X obj 7 10 inlet;
#X obj 7 214 outlet;
#X obj 7 33 unpack f f f f;
#X obj 70 74 << 8;
#X obj 38 118 << 16;
#X obj 7 165 << 24;
#X obj 70 98 +;
#X obj 38 139 +;
#X obj 7 190 +;
#X connect 0 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 4 0;
#X connect 2 2 3 0;
#X connect 2 3 6 1;
#X connect 3 0 6 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 7 1;
#X connect 7 0 8 1;
#X connect 8 0 1 0;
#X restore 14 282 pd MSB_2SB_3SB_LSB->float;
#X text 288 19 new packet;
#X text 23 327 frame length;
#X text 322 201 data stream;
#X connect 0 0 5 0;
#X connect 3 0 4 0;
#X connect 3 0 17 1;
#X connect 4 0 3 1;
#X connect 5 0 10 0;
#X connect 6 0 7 0;
#X connect 7 0 6 1;
#X connect 7 0 8 0;
#X connect 8 0 13 0;
#X connect 9 0 6 0;
#X connect 9 1 3 0;
#X connect 10 0 9 0;
#X connect 10 1 2 0;
#X connect 13 0 17 0;
#X connect 13 1 16 0;
#X connect 14 0 5 1;
#X connect 16 0 15 0;
#X connect 17 0 22 0;
#X connect 18 0 19 0;
#X connect 18 0 20 0;
#X connect 19 0 3 1;
#X connect 20 0 21 0;
#X connect 20 0 6 1;
#X connect 22 0 1 0;
#X restore 9 116 pd parse_frameheader;
#N canvas 748 498 450 300 form_packet 0;
#X obj 68 23 inlet;
#X text 106 24 length;
#X obj 194 22 inlet;
#X text 244 23 stream;
#X obj 120 190 list prepend;
#X obj 216 190 t a;
#X obj 14 123 f;
#X obj 14 144 + 1;
#X obj 14 99 t b a;
#X obj 14 187 t b b;
#X obj 46 213 list append;
#X obj 14 166 sel 0;
#X obj 46 253 outlet;
#X text 100 254 OSC packet;
#X text 261 262 EOP;
#X obj 210 261 outlet;
#X obj 68 88 t b a;
#X msg 68 111 0;
#X connect 0 0 16 0;
#X connect 2 0 8 0;
#X connect 4 0 5 0;
#X connect 4 0 10 1;
#X connect 5 0 4 1;
#X connect 6 0 7 0;
#X connect 7 0 6 1;
#X connect 7 0 11 0;
#X connect 8 0 6 0;
#X connect 8 1 4 0;
#X connect 9 0 15 0;
#X connect 9 1 10 0;
#X connect 10 0 12 0;
#X connect 11 0 9 0;
#X connect 16 0 17 0;
#X connect 16 0 4 1;
#X connect 16 1 11 1;
#X connect 17 0 6 1;
#X restore 9 150 pd form_packet;
#X obj 187 130 b;
#X obj 9 8 inlet;
#X obj 9 173 outlet;
#X obj 114 17 r SERVER;
#X obj 114 39 route socket;
#X obj 114 88 b;
#X obj 114 64 change;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 5 0;
#X connect 2 1 3 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X connect 6 0 7 0;
#X connect 7 0 9 0;
#X connect 8 0 1 1;
#X connect 9 0 8 0;
#X restore 8 295 pd repack_OSC;
#X connect 0 0 1 0;
#X connect 1 0 14 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 6 0;
#X connect 8 0 5 0;
#X connect 9 0 2 0;
#X connect 10 0 9 0;
#X connect 14 0 17 0;
#X connect 14 1 8 0;
#X connect 14 2 7 0;
#X connect 14 3 10 0;
#X connect 17 0 4 0;
#X restore 12 184 pd SERVER;
#X text 10 166 server;
#X text 185 233 OSC: /b;
#X text 185 258 OSC: /<socket>;
#X text 185 282 OSC: /s;
#N canvas 402 485 296 298 provide_socket 0;
#X obj 12 11 r SERVER;
#X obj 12 32 route server;
#X obj 12 79 routeOSC /socket;
#X obj 163 43 r SERVER;
#X obj 163 64 route socket;
#X obj 12 245 list trim;
#X obj 12 266 s SERVER;
#X obj 12 166 packOSC;
#X obj 12 222 list prepend;
#X msg 93 175 list to send \$1;
#X obj 12 122 list append;
#X obj 12 101 b;
#X obj 12 57 routeOSC /server;
#X msg 12 144 /server/socket \$1;
#N canvas 318 209 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 12 199 pd tcp.prepare;
#X connect 0 0 1 0;
#X connect 1 0 12 0;
#X connect 2 0 11 0;
#X connect 3 0 4 0;
#X connect 4 0 9 0;
#X connect 4 0 10 1;
#X connect 5 0 6 0;
#X connect 7 0 14 0;
#X connect 8 0 5 0;
#X connect 9 0 8 1;
#X connect 10 0 13 0;
#X connect 11 0 10 0;
#X connect 12 0 2 0;
#X connect 13 0 7 0;
#X connect 14 0 8 0;
#X restore 12 323 pd provide_socket;
#X obj 202 473 r SERVER;
#X obj 202 539 print DEBUG;
#N canvas 402 485 296 337 provide_ip 0;
#X obj 12 11 r SERVER;
#X obj 12 32 route server;
#X obj 134 68 r SERVER;
#X obj 12 286 list trim;
#X obj 12 307 s SERVER;
#X obj 12 213 packOSC;
#X obj 12 263 list prepend;
#X msg 131 209 list to send \$1;
#X obj 12 101 b;
#X obj 12 78 routeOSC /ip;
#X obj 134 89 route ip;
#X obj 12 123 list append;
#X obj 12 192 list trim;
#X obj 12 145 list prepend /server/ip;
#X obj 131 167 r SERVER;
#X obj 131 188 route socket;
#X obj 12 55 routeOSC /server;
#N canvas 318 209 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 12 233 pd tcp.prepare;
#X connect 0 0 1 0;
#X connect 1 0 16 0;
#X connect 2 0 10 0;
#X connect 3 0 4 0;
#X connect 5 0 17 0;
#X connect 6 0 3 0;
#X connect 7 0 6 1;
#X connect 8 0 11 0;
#X connect 9 0 8 0;
#X connect 10 0 11 1;
#X connect 11 0 13 0;
#X connect 12 0 5 0;
#X connect 13 0 12 0;
#X connect 14 0 15 0;
#X connect 15 0 7 0;
#X connect 16 0 9 0;
#X connect 17 0 6 0;
#X restore 12 345 pd provide_ip;
#N canvas 402 485 281 231 provide_num_of_clients 0;
#X obj 10 8 r SERVER;
#X obj 10 166 list trim;
#X obj 10 187 s SERVER;
#X obj 10 94 packOSC;
#X obj 10 73 list trim;
#X obj 10 29 route num_of_clients;
#X obj 10 52 list prepend /server/num_of_clients;
#X obj 10 143 list prepend to broadcast;
#N canvas 318 209 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 10 118 pd tcp.prepare;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 4 0;
#X connect 7 0 1 0;
#X connect 8 0 7 0;
#X restore 12 367 pd provide_num_of_clients;
#X obj 202 517 spigot;
#X obj 241 496 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 259 496 debug;
#X text 11 215 proxy methods;
#X text 12 305 server methods;
#X text 8 84 http://www.netpd.org/server;
#X text 8 69 more info:;
#X text 8 44 dep: pd >=0.40 \, mrpeach;
#X text 8 6 netpd-server2;
#X text 6 115 ------------------------------------------;
#X obj 12 141 declare -stdpath extra/mrpeach;
#N canvas 393 132 213 152 tcp.prepare 0;
#X obj 17 8 inlet;
#X obj 17 122 outlet;
#X obj 17 56 list length;
#X obj 17 36 t a a;
#N canvas 377 271 447 396 float->MSB_2SB_3SB_LSB 0;
#X obj 16 44 t a a;
#X obj 16 67 >> 8;
#X obj 16 88 t a a;
#X obj 16 111 >> 8;
#X obj 16 134 t a a;
#X obj 16 157 >> 8;
#X obj 16 214 pack f f f f;
#X obj 16 22 inlet;
#X obj 16 238 outlet;
#X obj 146 182 & 255;
#X obj 102 182 & 255;
#X obj 59 182 & 255;
#X obj 16 182 & 255;
#X connect 0 0 1 0;
#X connect 0 1 9 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 10 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 11 0;
#X connect 5 0 12 0;
#X connect 6 0 8 0;
#X connect 7 0 0 0;
#X connect 9 0 6 3;
#X connect 10 0 6 2;
#X connect 11 0 6 1;
#X connect 12 0 6 0;
#X restore 17 77 pd float->MSB_2SB_3SB_LSB;
#X obj 17 98 list append;
#X connect 0 0 3 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 3 1 5 1;
#X connect 4 0 5 0;
#X connect 5 0 1 0;
#X restore 12 516 pd tcp.prepare;
#X obj 12 494 r to.tcp.prepare;
#X obj 12 537 s from.tcp.prepare;
#N canvas 742 246 125 216 CPU_LOAD 0;
#X obj 14 77 cputime;
#X obj 14 55 t b b;
#X obj 14 101 int;
#X obj 14 10 loadbang;
#X obj 14 32 metro 4000;
#X obj 14 125 * 0.025;
#X obj 14 146 outlet;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 1 1 0 1;
#X connect 2 0 5 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X restore 179 396 pd CPU_LOAD;
#X floatatom 179 420 5 0 0 0 - - -;
#X text 218 419 %;
#X text 8 25 version: 2.0.-2;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 12 0 16 0;
#X connect 16 0 13 0;
#X connect 17 0 16 1;
#X connect 27 0 29 0;
#X connect 28 0 27 0;
#X connect 30 0 31 0;
